#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

ARGS=("$@")
USAGE="$(basename "$0") -o|--output [xdotool|clipboard|stdout|-] -s|--selector [fzf|rofi] -t|--skin-tone [neutral|light|medium-light|moderate|dark-brown|black]

By default, will prompt a user to select an special character to copy to the clipboard using fzf if in a terminal, or rofi in a gui.

where:
    Options:
        -o|--output (optional) - Instead of outputting to stdout, output to one of: xdotool (auto type), clipboard, or stdout, -
        -s|--selector (optional) - Uses fzf for CLI environments or rofi for GUIs. Override by specifying one of: fzf, rofi
        -t|--skin-tone (optional) A skin to to apply to select emojis: neutral, light, medium-light, moderate, dark-brown, black
"

function process_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do
        KEY="${ARGS[0]}"
        VALUE="${ARGS[1]}"

        case "${KEY}" in
            -h|--help)
                echo "$USAGE">&2
                exit 0
                ;;
            -t|--skin-tone)
                SKIN_KEY="$VALUE"
                case "${SKIN_KEY}" in
                    "neutral")
                        SKIN_TONE=""
                        ;;
                    "light")
                        SKIN_TONE="üèª"
                        ;;
                    "medium-light")
                        SKIN_TONE="üèº"
                        ;;
                    "moderate")
                        SKIN_TONE="üèΩ"
                        ;;
                    "dark-brown")
                        SKIN_TONE="üèæ"
                        ;;
                    "black")
                        SKIN_TONE="üèø"
                        ;;
                    *)
                        SKIN_TONE=""
                        ;;
                esac
                ARGS=("${ARGS[@]:2}")
                ;;
            -s|--selector)
                SELECTOR="$VALUE"
                ARGS=("${ARGS[@]:2}")
                ;;
            -o|--output)
                OUTPUT_STRATEGY="$VALUE"
                ARGS=("${ARGS[@]:2}")
                ;;
            *)  # Unknown Option or "key=value"
                while IFS='=' read -ra SPLIT <<< ${KEY}; do
                    # Split by the "=" and add back to our arguments array
                    for i in "${SPLIT[@]}"; do
                      ARGS+=("${i}")
                    done
                    FOUND_SPLIT=1
                    ARGS=("${ARGS[@]:1}")
                    break
                done
                if [[ -z "${FOUND_SPLIT}" ]]; then
                    echo "Unknown option $1"
                    echo "${USAGE}"
                    exit 1
                fi
                ;;
            --)
                ARGS=("${ARGS[@]:1}")
                break
                ;;
        esac
    done
}
process_args


altcode_files="$DIR/altcode.d/"*.txt

function select_char() {
    # Prompt user to select from list of special characters
    if [[ $CLI_ENV == 0 ]] || [[ "$SELECTOR" == "fzf" ]] && [[ "$SELECTOR" != "rofi" ]]; then
        cat - | fzf
    else
        cat - | rofi -dmenu -markup-rows -i -multi-select -p 'üòÄ' -kb-custom-1 'Alt+c' -kb-custom-2 'Alt+t' -kb-custom-3 'Alt+p'
    fi
}

function output_strategy_pre() {
    # Pre-selection hook for output strategy
    if [[ -z "$OUTPUT_STRATEGY" ]]; then
        # Set a "smart" default. Hopefully smart anyway.
        if [[ $CLI_ENV == 0 ]] || [[ "$SELECTOR" == "fzf" ]]; then
            export OUTPUT_STRATEGY="stdout"
        else
            export OUTPUT_STRATEGY="xdotool"
        fi
    fi

    if [[ "$OUTPUT_STRATEGY" == "xdotool" ]]; then
        X_ACTIVE_WINDOW=$(xdotool getactivewindow)
    fi
}

function output_strategy() {
    # Where to send our output
    if [[ "$OUTPUT_STRATEGY" == "xdotool" ]]; then
        xdotool type --clearmodifiers --window $X_ACTIVE_WINDOW $(cat -)
    elif [[ "$OUTPUT_STRATEGY" == "clipboard" ]]; then
        cat - | xclip -i -selection clipboard
    elif [[ "$OUTPUT_STRATEGY" == "stdout" ]] || [[ "$OUTPUT_STRATEGY" == "-" ]]; then
        cat -
    else
        echo "Unknown output strategy: $OUTPUT_STRATEGY" >&2
        exit 1
    fi
}

CLI_ENV=$([[ -t 0 ]]; echo $?)

output_strategy_pre

special_cahr=$(
    cat $altcode_files \
        | select_char \
        | sed -n -E -e 's/^(.+) \| [^\|]+$/\1/p'
    )

special_char_len=$(
    oLang=$LANG oLcAll=$LC_ALL
    LANG=C LC_ALL=C
    echo ${#special_cahr}
    LANG=$oLang LC_ALL=$oLcAll
)

if grep -Fxq "$special_cahr" "$DIR/altcode.d/emoji_modifiers.meta"; then
    echo "${special_cahr}${SKIN_TONE}" | output_strategy
else
    echo "$special_cahr" | output_strategy
fi
