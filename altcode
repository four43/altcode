#!/bin/bash
set -eo pipefail

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

ARGS=("$@")
USAGE="$(basename "$0") -o|--output [xdotool|clipboard|stdout|-] -s|--selector [fzf|rofi] -t|--skin-tone [neutral|light|medium-light|moderate|dark-brown|black]

By default, will prompt a user to select an special character to copy to the clipboard using fzf if in a terminal, or rofi in a gui.

where:
    Options:
        -o|--output (optional) - Instead of outputting to stdout, output to one of: xdotool (auto type), clipboard, or stdout, -
        -s|--selector (optional) - Uses fzf for CLI environments or rofi for GUIs. Override by specifying one of: fzf, rofi
        -t|--skin-tone (optional) A skin to to apply to select emojis: neutral, light, medium-light, moderate, dark-brown, black
"

while [[ "${#ARGS[@]}" -gt 0 ]]; do
    KEY="${ARGS[0]}"
    VALUE="${ARGS[1]}"

    case "${KEY}" in
        -h|--help)
            echo "$USAGE">&2
            exit 0
            ;;
        -t|--skin-tone)
            SKIN_KEY="$VALUE"
            case "${SKIN_KEY}" in
                "neutral")
                    SKIN_TONE=""
                    ;;
                "light")
                    SKIN_TONE="üèª"
                    ;;
                "medium-light")
                    SKIN_TONE="üèº"
                    ;;
                "moderate")
                    SKIN_TONE="üèΩ"
                    ;;
                "dark-brown")
                    SKIN_TONE="üèæ"
                    ;;
                "black")
                    SKIN_TONE="üèø"
                    ;;
                *)
                    SKIN_TONE=""
                    ;;
            esac
            ARGS=("${ARGS[@]:2}")
            ;;
        -s|--selector)
            SELECTOR="$VALUE"
            ARGS=("${ARGS[@]:2}")
            ;;
        -o|--output)
            OUTPUT_STRATEGY="$VALUE"
            ARGS=("${ARGS[@]:2}")
            ;;
        --)
            ARGS=("${ARGS[@]:1}")
            break
            ;;
        *)  # Unknown Option or "key=value"
            while IFS='=' read -ra SPLIT <<< ${KEY}; do
                # Split by the "=" and add back to our arguments array
                for i in "${SPLIT[@]}"; do
                  ARGS+=("${i}")
                done
                FOUND_SPLIT=1
                ARGS=("${ARGS[@]:1}")
                break
            done
            if [[ -z "${FOUND_SPLIT}" ]]; then
                echo "Unknown option $1"
                echo "${USAGE}"
                exit 1
            fi
            ;;

    esac
done


CLI_ENV=$([[ -t 0 ]]; echo $?)

# Set SELECTOR Default (smart based on our environment)
if [[ -z "$SELECTOR" ]]; then
    if [[ $CLI_ENV == 0 ]]; then
        SELECTOR="fzf"
    else
        SELECTOR="rofi"
    fi
fi

# Set OUTPUT_STRATEGY Default (smart based on our environment)
if [[ -z "$OUTPUT_STRATEGY" ]]; then
    if [[ $CLI_ENV == 0 ]]; then
        OUTPUT_STRATEGY="stdout"
    else
        OUTPUT_STRATEGY="xdotool"
    fi
fi

altcode_files="$DIR/altcode.d/"*.txt

function select_char() {
    # Prompt user to select from list of special characters
    case "${SELECTOR}" in
        fzf)
            cat - | fzf
            ;;
        rofi)
            cat - | rofi -dmenu -markup-rows -i -multi-select -p 'üòÄ' -kb-custom-1 'Alt+c' -kb-custom-2 'Alt+t' -kb-custom-3 'Alt+p'
            ;;
        *)
            echo "Unknown selection strategy: ${SELECTOR}" >&2
            exit 1
    esac
}

function output_strategy_pre() {
    # Pre-selection hook for output strategy
    if [[ "$OUTPUT_STRATEGY" == "xdotool" ]] || [[ "$OUTPUT_STRATEGY" == "copypaste" ]]; then
        X_ACTIVE_WINDOW=$(xdotool getactivewindow)
    fi
}

function output_strategy() {
    character="$1"
    # Where to send our output
    case "${OUTPUT_STRATEGY}" in
        xdotool)
            xdotool windowactivate --sync "$X_ACTIVE_WINDOW" type "$character"
            ;;
        copypaste)
            set +e
            # If old target was an image or something this will fail. We tried our best to restore our old clipboard
            # values
            old_clipboard_content_primary="$(xclip -o -selection primary)"
            old_clipboard_content_clipboard="$(xclip -o -selection clipboard)"
            set -e

            echo -n "$character" | xclip -i -selection primary
            echo -n "$character" | xclip -i -selection clipboard
            xdotool windowactivate --sync $X_ACTIVE_WINDOW key --clearmodifiers Shift+Insert sleep 0.05

            # Put clipboard contents back
            echo -n "$old_clipboard_content_primary"   | xclip -i -selection primary
            echo -n "$old_clipboard_content_clipboard" | xclip -i -selection clipboard
            ;;
        clipboard)
            cat "$character" | xclip -i -selection clipboard
            ;;
        stdout|-)
            cat "$character"
            ;;
        *)
            echo "Unknown output strategy: $OUTPUT_STRATEGY" >&2
            exit 1
    esac
}

output_strategy_pre

special_char=$(
    cat $altcode_files \
        | select_char \
        | sed -n -E -e 's/^(.+) \| [^\|]+$/\1/p' \
        | tr -d '\n'
    )

special_char_len=$(
    oLang=$LANG oLcAll=$LC_ALL
    LANG=C LC_ALL=C
    echo ${#special_char}
    LANG=$oLang LC_ALL=$oLcAll
)

if grep -Fxq "$special_char" "$DIR/altcode.d/emoji_modifiers.meta"; then
    output_strategy "${special_char}${SKIN_TONE}"
else
    output_strategy "${special_char}"
fi
